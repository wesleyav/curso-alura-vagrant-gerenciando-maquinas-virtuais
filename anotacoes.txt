# Configuração de Vagrant em máquina Windows

# Download do VirtualBox 6.0.4
# https://download.virtualbox.org/virtualbox/6.0.4/VirtualBox-6.0.4-128413-Win.exe

# Download do Vagrant
# https://releases.hashicorp.com/vagrant/2.2.3/vagrant_2.2.3_x86_64.msi

# Após instalação, verificar no prompt se está ok e versão instalada com:
$ vagrant version

# Dentro da pasta do projeto criar inicialização:
$ vagrant init hashicorp/precise64

# Subir máquina virtual (pode ser necessário habilitar Hyper-v no Windows)
$ vagrant up
# Aqui vai baixar alguns arquivos e subir o ambiente

# Verificar status
$ vagrant status

# Desligar vm
$ vagrant halt

# Visualizar configurações ssh
$ vagrant ssh-config

# Conectar em porta do ssh
$ vagrant -p 222 vagrant@127.0.0.1
# user vagrant / senha vagrant

#################################################

# Acessando o ubuntu (no caso), atualize os pacotes com:
$ sudo apt-get update

# Instalar o nginx
$ sudo apt-get install -y nginx

# Visualizar portas
$ netstat -lntp

# Testar o nginx via terminal:
$ curl http://localhost

# Adicionar a linha de configuração de Forward para a VM no arquivo Vagrantfile:
$ config.vm.network "forwarded_port", guest: 80, host: 8080

# Reiniciar a VM com:
$ vagrant halt
$ vagrant up

# Acessar pelo navegador o caminho do servidor Nginx:
# localhost:8080 (inserir o ip definido no Vagrantfile

# Adicionar IP Estático
# Adicionar a linha de configuração de Forward para a VM no arquivo Vagrantfile:
$ config.vm.network "private_network", ip: "192.168.50.4"

# Recarregar VM
$ vagrant reload (nem sempre funciona)

#################################################

# Apagar a VM (forçado)
$ vagrant destroy -f

# Configurar DHCP
# Alterar a linha de configuração de Forward para a VM no arquivo Vagrantfile:
$ config.vm.network "private_network", type: "dhcp"

# Instalar Nginx
$ sudo apt-get update && sudo apt-get install -y nginx

#################################################

# Configurar IP Público (modo bridge)
# Alterar a linha de configuração de Forward para a VM no arquivo Vagrantfile:
$ config.vm.network "public_network"

#################################################

# Criar par de chaves
$ ssh-keygen -t rsa

# Inserir o local onde será salvo a chave: 
# Inserir senha caso necessário

# Acessar VM via SSH e copiar chave para VM:

# Listar arquivos em pasta compartilhada
$ ls /vagrant/

# Copiar chave 
$ cp /vagrant/id_bionic.pub .

# Imprimir o conteúdo do arquivo
$ cat id_bionic.pub

# Adicionar chave ao arquivo .ssh/authorized_keys
$ cat id_bionic.pub >> .ssh/authorized_keys

# Exibir o conteúdo de .ssh/authorized_keys
$ cat .ssh/authorized_keys

# Conectar via SSH na VM usando a chave criada e importada
$ ssh -i id_bionic vagrant@192.168.0.7

#################################################

# Verificar listagem de comandos Vagrant
$ vagrant list-commands

#################################################

# Provisionar

# Alterar a linha de configuração de provision para a VM no arquivo Vagrantfile:
# config.vm.provision "shell",
    inline: "echo Hello, World"

# Executar o provision
$ vagrant provision

#################################################

# Criar diretório
# Adicionar a linha de configuração para a VM no arquivo Vagrantfile:
# config.vm.synced_folder "./configs/", "/configs"

# Adicionar chave no arquivo authorized_keys no provisionamento
# Adicionar a linha de configuração para a VM no arquivo Vagrantfile:
$ cat /configs/id_bionic.pub >> .ssh/authorized_keys

# Destruir VM e carregar novamente
$ vagrant destroy -f && vagrant up

#################################################

# Adicionar a instalação do MySQL 5.7 ao provisionamento
# Adicionar a linha de configuração para a VM no arquivo Vagrantfile:
# config.vm.provision "shell",
    inline: "apt-get update && apt-get install -y mysql-server-5.7"

# Utilizar o sinal de "\" no final de cada linha de script para funcionar corretamente
# apt-get update && \

# Destruir VM e carregar novamente
$ vagrant destroy -f && vagrant up

# Testar mysql
# Conectar na VM via SSH e no MySQ:
$ vagrant ssh
$ sudo mysql

# Visualizar usuários do MySQL (testando se MySQL foi instalado)
$ select user from mysql.user;

# Copiar arquivo de configuração do MySQL para a pasta do projeto (No Windows)
cat /etc/mysql/mysql.conf.d/mysql.cnf >> /configs/mysqld.cnf

# Acessar o arquivo e alterar a opção:
# bind-address		= 127.0.0.1
# para:
# bind-address		= 0.0.0.0

# Adicionar a linha de configuração para a VM no arquivo Vagrantfile:
# config.vm.provision "shell",
    inline: "cat /configs/mysqld.cnf >> /etc/mysql/mysql.conf.d/mysqld.cnf"

# Adicionar a linha de configuração para a VM no arquivo Vagrantfile:
# Reiniciar o servidor mysql após alterar as configurações do mesmo
# config.vm.provision "shell",
    inline: "service mysql restart"

#################################################

# Adicionar máquinas múltiplas

# Adicionar a linha de configuração para a VM no arquivo Vagrantfile:
config.vm.define "mysqldb" do |mysql|    
    mysql.vm.network "public_network", ip: "192.168.0.7"

    mysql.vm.provision "shell",
      inline: "cat /configs/id_bionic.pub >> .ssh/authorized_keys"

    mysql.vm.provision "shell",
      inline: $script_mysql

    mysql.vm.provision "shell",
      inline: "cat /configs/mysqld.cnf > /etc/mysql/mysql.conf.d/mysqld.cnf"

    mysql.vm.provision "shell",
      inline: "service mysql restart"

    mysql.vm.synced_folder "./configs/", "/configs"
    mysql.vm.synced_folder ".", "/vagrant", disabled: true
  end

  config.vm.define "phpweb" do |phpweb|
    phpweb.vm.network "forwarded_port", guest: 80, host: 8089
    phpweb.vm.network "public_network", ip: "192.168.0.8"
  end 

# Foi adicionado 2 máquinas dentro do box ubuntu/bionic64

# Visualizar o status exibindo todos os ambientes
$ vagrant status

# Destruir apenas phpweb
$ vagrant destroy -f phpweb

# Carregar somente mysqldb
$ vagrant up mysqld

# Carregar somente phpweb
vagrant up phpweb

# Carregar as duas VM´s (phpweb e mysqldb)
$ vagrant up
